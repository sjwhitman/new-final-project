Next steps:
1. Create User Account
    a. User can store custom intervals for their work timer and their break timer
    HTML - probably the homepage - form for create Account
    Server - route to handle form submission - creates user instance, adds to database, redirects to login page
    Server - build login page route
    HTML - login page html
2. Users Need Login Option
    HTML - login form submits to login handling route
    Server - log user in, redirect to profile if successful, redirect to login page if not successful
    Server - profile route to render profile page
    HTML - profile page (start basic, something that just shows the username or something)
3.Build out Profile page
    db_init - add function to get all tasks by user id
    db_init - add a couple of tasks to a test user to seed the database
    html - add jinja for-loop to display all tasks belonging to a particular user, check that test data displays when test user is logged in
4. Users Need to Log Out
5. User Can Save Individual Tasks - backend queries database by task_id each time to display list 
6. Users can update profile information
7. User can pick between light and dark mode


#add tasks from profile page, saved with users
#UI issue/confusion with profile page, adding settings then having to go back to homepage 
#profile should be like homepage+ with full task list/timer functionality, only with customization

#write a function to call timer twice, once with work interval, once with break interval. This is to auto-populate timer with countdown 

#consider adding ajax to task add/delete functionality 

Possible extra - use JavaScript sessionStorage to make login-less version of task manager

(not correct, add your curly brackets and stuff)
<ol>
for task in tasks
<ul>
    <h1>task.task_name</h1>
    <li>task.task_description</li>

</ul>
endfor
</ol>



JS - 

-in html, style task list as desired (bring back the ones with the delete button)
    in profile.html, bring back lines 27-35, and give the <ul> an id
    in profile.html, comment out lines 57 - 64
- back in profile.JS
    -in that spot with our notes, select the <ul> by id, and we'll insertAdjacentHTML into it 'beforeend'
    -You'll use the results we passed through to create the html string we're inserting
    -Here's a syntax example below, but select by the id you gave the <ul>

        document.querySelector('ul').insertAdjacentHTML('beforeend', '<li>Finish homework</li>');

    - And the html string you give it will look like the example below, and use back ticks so you can put some variables in the string

        <li>${results.task_name} <form method="post" action="/delete_task/${results.task_id}"> <button type="submit">Delete</button> </form> </li>

    (The string is a match for the html in profile.html)

Give this a go, and if it doesn't work, there's no need to stress, we can finish it together on Monday.
Just plan to have some energy on Monday for us to work some more. 
You got this!  You've made some good progress this week



//  the html element that displays the list of tasks will need an id 
//     actually, it looks like you switched which task list you're displaying.  Looks like it's no longer the one with the delete
//     so I'll pop some more thorough notes in the notes.txt
//     this is where you'll add the js stuff.  